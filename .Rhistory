整
border_color = NA, #
表
示
热
图
每
个
小
的
单
元
格
边
框
的
颜
色
，
默
认
为 "grey60"
cellwidth = 60, cellheight = 7.5,  #
表
示
单
个
单
元
格
的
宽
度\
高
度
，
默
认
为
“NA
”
display_numbers = T, #
表
示
是
否
在
单
元
格
上
显
示
原
始
数
值
或
按
照
特
殊
条
件
进
行
区
分
标
记
fontsize_number = 6, #
表
示
热
图
上
显
示
数
字
的
字
体
大
小
number_format = "%.2f", #
表
示
热
图
单
元
格
上
显
示
的
数
据
格
式
，
“%.2f
”
表
示
两
位
小
数,
“%.1e
”
表
示
科
学
计
数
法
number_color = "grey30") #
表
示
热
图
单
元
格
上
显
示
的
数
据
字
体
颜
色
library(ggplot2)
library(reshape2)
data <- readLines("03.classification.filtered.txt")
#
转
换
数
据
格
式
groups <- c("WCC", "WR1", "WR2", "RCC")
classifications <- c("LINE", "SINE", "LTR/Copia", "LTR/Gypsy", "DNA")
data_clean <- data.frame(
Group = character(),
Classification = character(),
Count = integer()
)
#
初
始
化 current_group
为
空
字
符
串
current_group <- ""
#
解
析
数
据
for (line in data) {
if (startsWith(line, "Group")) {
current_group <- strsplit(line, ": ")[[1]][2]
} else if (current_group != "") {
parts <- strsplit(line, ": ")[[1]]
if (length(parts) == 2) {
classification <- parts[1]
count <- as.integer(parts[2])
data_clean <- rbind(data_clean, data.frame(Group = current_group, Classification = classification, Count = count))
}
}
}
#
绘
制
柱
状
图
函
数
plot_bar <- function(category) {
ggplot(subset(data_clean, Classification == category), aes(x = Group, y = Count, fill = Group)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = paste("Count of", category), x = "Group", y = "Count")
}
#
绘
制
并
保
存
图
像
pdf("Transposon_Classification_Counts.filtered.pdf")
for (category in classifications) {
print(plot_bar(category))
}
dev.off()
q()
x <- 1:11
y<-c(0.61694,0.43765,0.28916,0.21286,0.15618,0.14823,0.14344,0.14388,0.17883,0.16251,0.17307)
par(mgp = c(5,1,0),mar = c(8,8,4,4))
plot(x,y,type="b",xlab="K value",ylab="Cross-Validation (CV) errors",
lab = c(10,5,1),
col=c(rep("black",2),"red",rep("black",7)),
bg = c(rep("black",2),"red",rep("black",7)),
bty = "l",las = 1,cex.lab = 2,cex.axis = 1.5,cex = 2,
pch = 21,lwd = 2,font = 2,font.lab = 2,font.axis = 2)
box(lwd = 3,bty = "l")
plot(x,y,type="b",xlab="K value",ylab="Cross-Validation (CV) errors",
lab = c(10,5,1),
col=c(rep("black",2),"red",rep("black",7)),
bg = c(rep("black",2),"red",rep("black",7)),
bty = "l",las = 1,cex.lab = 2,cex.axis = 1.5,cex = 2,
pch = 21,lwd = 2,font = 2,font.lab = 2,font.axis = 2)
box(lwd = 7,bty = "l")
x <- 1:11
y<-c(0.61694,0.43765,0.28916,0.21286,0.15618,0.14823,0.14344,0.14388,0.17883,0.16251,0.17307)
par(mgp = c(5,1,0),mar = c(8,8,4,4))
plot(x,y,type="b",xlab="K value",ylab="Cross-Validation (CV) errors",
lab = c(10,5,1),
col=c(rep("black",2),"red",rep("black",7)),
bg = c(rep("black",2),"red",rep("black",7)),
bty = "l",las = 1,cex.lab = 2,cex.axis = 1.5,cex = 2,
pch = 21,lwd = 2,font = 2,font.lab = 2,font.axis = 2)
box(lwd = 7,bty = "l")
x <- 1:11
y<-c(0.61694,0.43765,0.28916,0.21286,0.15618,0.14823,0.14344,0.14388,0.17883,0.16251,0.17307)
par(mgp = c(5,1,0),mar = c(8,8,4,4))
plot(x,y,type="b",xlab="K value",ylab="Cross-Validation (CV) errors",
lab = c(10,5,1),
col=c(rep("black",6),"red",rep("black",4)),
bg = c(rep("black",6),"red",rep("black",4)),
bty = "l",las = 1,cex.lab = 2,cex.axis = 1.5,cex = 2,
pch = 21,lwd = 2,font = 2,font.lab = 2,font.axis = 2)
box(lwd = 3,bty = "l")
data= read.table("D:\\工作记录\\2bRAD\\genotype\\QC.7.Q");
head(data)
pdf("D:\\工作记录\\2bRAD\\genotype\\Q4.pdf")
barplot(t(as.matrix(data)),col = rainbow(3),
xlab = "Individual",
ylab = "Ancestry",
border = NA,space = 0)
dev.off()
data= read.table("D:\\工作记录\\2bRAD\\genotype\\QC.5.Q");
head(data)
pdf("D:\\工作记录\\2bRAD\\genotype\\Q5.pdf")
barplot(t(as.matrix(data)),col = rainbow(3),
xlab = "Individual",
ylab = "Ancestry",
border = NA,space = 0)
dev.off()
data= read.table("D:\\工作记录\\2bRAD\\genotype\\QC.2.Q");
pdf("D:\\工作记录\\2bRAD\\genotype\\Q2.pdf")
barplot(t(as.matrix(data)),col = rainbow(3),
xlab = "Individual",
ylab = "Ancestry",
border = NA,space = 0)
dev.off()
plotQ()
devtools::install_github('IRkernel/repr')
library(vegan)
# 安装和加载必要的包
if (!require("vegan")) install.packages("vegan")
BiocManager::install("vegan")
BiocManager::install("vegan")
BiocManager::install("vegan",force=T)
# 生成一个OTU表，包含10个样本和5种物种，数据是基于泊松分布生成的，模拟物种丰度。
set.seed(42)  # 设置随机种子以保证结果的可重复性
otu_table <- matrix(rpois(50, lambda = 5), ncol = 5)  # 50个数据点，平均丰度为5
colnames(otu_table) <- paste("Species", 1:5, sep = "_")  # 给物种列命名
rownames(otu_table) <- paste("Sample", 1:10, sep = "_")  # 给样本行命名
View(data)
View(otu_table)
# 创建一个包含环境变量的DataFrame，这些变量影响物种分布，包括温度、湿度和pH值。
env_data <- data.frame(
Temperature = rnorm(10, mean = 20, sd = 5),  # 10个样本的温度，正态分布，平均20，标准差5
Humidity = runif(10, min = 30, max = 80),  # 10个样本的湿度，均匀分布在30到80之间
pH = rnorm(10, mean = 6.5, sd = 0.3)  # 10个样本的pH值，正态分布，平均6.5，标准差0.3
)
View(otu_table)
View(env_data)
rownames(env_data) <- paste("Sample", 1:10, sep = "_")  # 确保样本行名与OTU表一致
View(otu_table)
View(env_data)
View(otu_table)
# 使用vegan包的rda函数进行冗余分析，关联物种丰度与环境变量。
rda_result <- rda(otu_table ~ Temperature + Humidity + pH, data = env_data)
library(vegan)
# 使用vegan包的rda函数进行冗余分析，关联物种丰度与环境变量。
rda_result <- rda(otu_table ~ Temperature + Humidity + pH, data = env_data)
View(rda_result)
# rda函数计算环境变量对物种丰度分布影响的线性组合，结果用于解释响应变量的方差。
# 查看RDA分析的摘要结果，包括解释的方差百分比和环境变量的统计显著性。
summary(rda_result)
# summary函数提供了模型拟合的详细统计概要，包括各主轴的方差解释和条件效应的F值等。
# 使用plot函数绘制RDA结果，显示样本点在由环境变量定义的空间中的分布。
plot(rda_result, display = "sites")
# 这张图展示了样本在RDA分析的第一和第二轴上的位置，反映了样本环境条件的差异。
# 使用plot函数绘制CCA结果，类似于RDA的可视化，但强调物种与环境的匹配。
plot(cca_result, display = "sites")
# rda函数计算环境变量对物种丰度分布影响的线性组合，结果用于解释响应变量的方差。
# 查看RDA分析的摘要结果，包括解释的方差百分比和环境变量的统计显著性。
# 使用vegan包的cca函数进行典型对应分析，这是一个直接梯度分析方法。
cca_result <- cca(otu_table ~ Temperature + Humidity + pH, data = env_data)
# cca函数通过最大化物种数据和环境变量之间的协变量来揭示物种和环境之间的关系。
# 查看CCA分析的摘要结果，这包括物种和环境轴的相关性及其统计显著性。
summary(cca_result)
# 这张图展示了样本在RDA分析的第一和第二轴上的位置，反映了样本环境条件的差异。
# 使用plot函数绘制CCA结果，类似于RDA的可视化，但强调物种与环境的匹配。
plot(cca_result, display = "sites")
View(cca_result)
# CCA图揭示了物种组成与环境梯度之间的对应关系，展示在不同环境条件下样本的分布。
# 绘制RDA的biplot
plot(rda_result, type = "n")  # 设置type为'n'，先不绘制点
text(rda_result, display = "species", col = "blue")  # 绘制物种秩
text(rda_result, display = "sites", col = "red")  # 绘制样本点
arrows(0, 0, rda_result$CCA$u[,1] * max(rda_result$CA$u[,1]),
rda_result$CCA$u[,2] * max(rda_result$CA$u[,1]), col = "green", length = 0.1)
# 环境变量向量
# 绘制CCA的biplot
plot(cca_result, type = "n")  # 设置type为'n'，先不绘制点
text(cca_result, display = "species", col = "blue")  # 绘制物种秩
text(cca_result, display = "sites", col = "red")  # 绘制样本点
arrows(0, 0, cca_result$CCA$u[,1] * max(cca_result$CA$u[,1]),
cca_result$CCA$u[,2] * max(cca_result$CA$u[,1]), col = "green", length = 0.1)
# CCA图揭示了物种组成与环境梯度之间的对应关系，展示在不同环境条件下样本的分布。
# 绘制RDA的biplot
plot(rda_result, type = "n")  # 设置type为'n'，先不绘制点
text(rda_result, display = "species", col = "blue")  # 绘制物种秩
text(rda_result, display = "sites", col = "red")  # 绘制样本点
arrows(0, 0, rda_result$CCA$u[,1] * max(rda_result$CA$u[,1]),
rda_result$CCA$u[,2] * max(rda_result$CA$u[,1]), col = "green", length = 0.1)
# 环境变量向量
# 绘制CCA的biplot
plot(cca_result, type = "n")  # 设置type为'n'，先不绘制点
text(cca_result, display = "species", col = "blue")  # 绘制物种秩
text(cca_result, display = "sites", col = "red")  # 绘制样本点
arrows(0, 0, cca_result$CCA$u[,1] * max(cca_result$CA$u[,1]),
cca_result$CCA$u[,2] * max(cca_result$CA$u[,1]), col = "green", length = 0.1)
## 1、首先模拟mRNA表达矩阵：
rm(list=ls())
# 加载必要的库
library(MASS)
# 设置随机数种子以获得可重复的结果
set.seed(123)
# 模拟mRNA表达量矩阵
# 假设有10000个基因和100个样本
n_gene <- 10000
rm(list=ls())
# 加载必要的库
library(MASS)
# 设置随机数种子以获得可重复的结果
set.seed(123)
# 模拟mRNA表达量矩阵
# 假设有10000个基因和100个样本
n_gene <- 10000
n_sample <- 100
mrna_matrix <- matrix(rnorm(n_gene*n_sample, mean = 0, sd = 1),
nrow = n_gene, ncol = n_sample)
colnames(mrna_matrix)=paste0('Sample',1:ncol(mrna_matrix))
rownames(mrna_matrix)=paste0('mRNA',1:nrow(mrna_matrix))
mrna_matrix
mrna_matrix[1:10,1:10]
## 2、接着模拟蛋白矩阵
# 模拟蛋白质表达量矩阵
# 假设蛋白质表达量与mRNA表达量有一定的相关性，但不是完全相关
# 我们可以通过添加一些噪声来模拟这一点
protein_matrix <- mrna_matrix + rnorm(n_gene*n_sample, mean = 0, sd = 0.5)
colnames(protein_matrix)=paste0('Sample',1:ncol(protein_matrix))
rownames(protein_matrix)=paste0('protein',1:nrow(protein_matrix))
protein_matrix[1:10,1:10]
## 3、计算每对mRNA-Protein的相关性
cors <- unlist(lapply(1:nrow(mrna_matrix), function(i){
cor(mrna_matrix[i,],protein_matrix[i,])
}))
# [1] 0.8513266 0.9216375 0.8905065 0.8799438 0.9256559 0.8821056
## 4、绘图
### 这里使用频率直方分布图进行展示，并绘制了拟合的密度曲线，注意实际绘制过程中调整bin区间
library(ggplot2)
p <- ggplot(data = tumor_cors,aes(x=cors)) +
geom_histogram(aes(y=..density..),binwidth = 0.003,fill="#f3807f",color="black") +
stat_density(geom='line',position='identity', linewidth=0.6) +
theme_classic()
p
tumor_cors <- cors
head(tumor_cors)
# [1] 0.8513266 0.9216375 0.8905065 0.8799438 0.9256559 0.8821056
## 4、绘图
### 这里使用频率直方分布图进行展示，并绘制了拟合的密度曲线，注意实际绘制过程中调整bin区间
library(ggplot2)
p <- ggplot(data = tumor_cors,aes(x=cors)) +
geom_histogram(aes(y=..density..),binwidth = 0.003,fill="#f3807f",color="black") +
stat_density(geom='line',position='identity', linewidth=0.6) +
theme_classic()
p
## 3、计算每对mRNA-Protein的相关性
cors <- unlist(lapply(1:nrow(mrna_matrix), function(i){
cor(mrna_matrix[i,],protein_matrix[i,])
}))
tumor_cors <- cors
head(tumor_cors)
# [1] 0.8513266 0.9216375 0.8905065 0.8799438 0.9256559 0.8821056
## 4、绘图
### 这里使用频率直方分布图进行展示，并绘制了拟合的密度曲线，注意实际绘制过程中调整bin区间
library(ggplot2)
p <- ggplot(data = tumor_cors,aes(x=cors)) +
geom_histogram(aes(y=..density..),binwidth = 0.003,fill="#f3807f",color="black") +
stat_density(geom='line',position='identity', linewidth=0.6) +
theme_classic()
tumor_cors <- as.data.frame(cors)
View(tumor_cors)
head(tumor_cors)
# [1] 0.8513266 0.9216375 0.8905065 0.8799438 0.9256559 0.8821056
## 4、绘图
### 这里使用频率直方分布图进行展示，并绘制了拟合的密度曲线，注意实际绘制过程中调整bin区间
library(ggplot2)
p <- ggplot(data = tumor_cors,aes(x=cors)) +
geom_histogram(aes(y=..density..),binwidth = 0.003,fill="#f3807f",color="black") +
stat_density(geom='line',position='identity', linewidth=0.6) +
theme_classic()
p
BiocManager::install("edgeR")
# 加载所需库
library(edgeR)
# 加载所需库
library(edgeR)
BiocManager::install("edgeR")
BiocManager::install("edgeR")
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
BiocManager::install("edgeR")
BiocManager::install("edgeR")
# 加载所需库
library(edgeR)
BiocManager::install("edgeR")
BiocManager::install("edgeR")
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
BiocManager::install("edgeR")
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
BiocManager::install("edgeR")
options(BioC_mirror="https://free.nchc.org.tw/bioconductor/")
BiocManager::install("edgeR")
options(BioC_mirror="https://free.nchc.org.tw/bioconductor/")
BiocManager::install("edgeR")
shiny::runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Locus_Zomm_shinny/Locus_Zomm')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Locus_Zomm_shinny/Locus_Zomm')
shiny::runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Locus_Zomm_shinny/Locus_Zomm')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Locus_Zomm_shinny/Locus_Zomm')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Locus_Zomm_shinny/Locus_Zomm')
install.packages("rsconnect")
library(rsconnect)
#install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='crafor18',
token='776199A3E6A0AF06EDD3B33982ACA2EB',
secret='<SECRET>')
rsconnect::setAccountInfo(name='crafor18', token='776199A3E6A0AF06EDD3B33982ACA2EB', secret='DccvEttJD0r0X4WmuWJJNfZ+beea6W+tpu8FYRRd')
rsconnect::deployApp('D:\\曾昀毕业论文\\8-大论文\\GWAS论文修改\\Locus_Zomm_shinny')
rsconnect::deployApp('D:\\曾昀毕业论文\\8-大论文\\GWAS论文修改\\Locus_Zomm_shinny\\Locus_Zomm')
shiny::runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/Box')
shiny::runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/从头开始的分析/tools/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/从头开始的分析/tools/Box')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/从头开始的分析/tools/Box')
library(shiny); runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/从头开始的分析/tools/Phenotype_Box/Phenotype_Box.R')
shiny::runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
runApp('D:/donwload/1111')
shiny::runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/从头开始的分析/tools/merge_shinny')
runApp('D:/曾昀毕业论文/8-大论文/GWAS论文修改/从头开始的分析/tools/merge_shinny')
# 安装 rsconnect 包（如未安装）
# install.packages("rsconnect")
library(rsconnect)
setwd("D:\\曾昀毕业论文\\8-大论文\\GWAS论文修改\\从头开始的分析\\tools\\merge_shinny")
# 设置账号信息（首次部署时需要配置）
rsconnect::setAccountInfo(name='crafor18',
token='776199A3E6A0AF06EDD3B33982ACA2EB',
secret='DccvEttJD0r0X4WmuWJJNfZ+beea6W+tpu8FYRRd')
# 部署应用
rsconnect::deployApp(appDir = ".", appName = "Z_Y_ketang_data_analysis_app")
